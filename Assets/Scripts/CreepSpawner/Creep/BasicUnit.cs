// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Apex.Units;
using Apex;
using EnergyBarToolkit;
using Google2u;
using Apex.Steering.Components;
using FlightPathManager;
using CreepSpawnerPackage;
using System.Collections;
using UnityStandardAssets.Characters.ThirdPerson;
using Creep;


namespace UnitScripts
{
	public class BasicUnit : MonoBehaviour
	{
		public Transform exit;
		public float exitThreshold = 5f;
		public float health = 10;
		public float signature;
		public static FastPool healthBarPool;
		public GameObject healthBarPrefab;
		public static GameObject canvas;
		public EnergyBar energyBar;
		public float multiplier = 1f;

		public bool mechanical;
		public bool flying;

		public GameObject hudTextPrefab;
		public HUDText mText;

		public ETargetType unitType;


		public float unitSpeed = 1f;

		public float originalSpeed = 1f;
		public int slowTimeRemaining = 0;
		public float value = 1f;

		public GameObject[] deathParticles;
		public GameObject[] deathExplosions;
		public int unitSpreadsheetID = 0;

		public bool destroying = false;
		void Start() 
		{
			if(healthBarPool==null) {
				healthBarPool = FastPoolManager.GetPool(healthBarPrefab,true);
			}
			if(canvas==null) {
				canvas = GameObject.Find ("Canvas");
			
			}


			setupUnit();
			
			if(this.flying==false) {
				UnitFacade u = (UnitFacade) this.GetUnitFacade();
				GameObject exit = GameObject.Find("CreepExit");
				u.MoveTo(exit.transform.position,false);
			}
			if(!GameManager.REF.demo) {
				GameObject child = NGUITools.AddChild(CreepSpawner.hudRoot, this.hudTextPrefab);
				mText = child.GetComponent<HUDText>();
			
				// Make the UI follow the target
				child.AddComponent<UIFollowTarget>().target = this.transform;
			}

		}

		public void finalDestroy() {
			//TODO! Move this from here
			if(this.deathExplosions.Length>0) {
				for(int i = 0;i<this.deathExplosions.Length;i++) {
					FastPool f = FastPoolManager.GetPool(deathExplosions[i],true);
					
					if(f!=null) {
						f.TryGetNextObject(this.transform.position,Quaternion.identity);
					}
				}
				deathExplosions = new GameObject[0];
			}
			
			
		}
		private void setupUnit() {
			for(int i = 0;i<CreepsList.Instance.Rows.Count;i++) {
				CreepsListRow r = CreepsList.Instance.Rows[i];
				if(r._ID==this.unitSpreadsheetID) {
					this.health = r._HitPoints*this.multiplier;
					this.mechanical = r._IsMechanical;
					this.flying = r._IsFlying;
					this.value = r._Value;
					this.unitSpeed = r._UnitSpeed; 
					this.originalSpeed = unitSpeed;
					applyUnitStats();
				}
			}  
		}
		private void applyUnitStats() {
			if(this.GetComponent<HumanoidSpeedComponent>()!=null) {
				HumanoidSpeedComponent h = this.GetComponent<HumanoidSpeedComponent>();
				h.runSpeed = this.unitSpeed;
				h.walkSpeed = this.unitSpeed;
				h.Run(); 
				
			}  else if(this.GetComponent<FlightPathFollower>()!=null) {
				FlightPathFollower f = this.GetComponent<FlightPathFollower>();
				f.moveSpeed = this.unitSpeed;
			}
		}
		public void hitUnit(float aDamage,float aDamageInfantryMultiplier,float aDamageMachineMultiplier,float aSlowPercent,int aSlowTime,ETargetType aSlowTarget) {

			if(this.health>0f) {
				if(this.unitType==ETargetType.Infantry) {
					aDamage = aDamage*aDamageInfantryMultiplier;
				}
				if(this.unitType==ETargetType.Mechanical||this.unitType==ETargetType.FlyingMechanical) {
					aDamage = aDamage*aDamageMachineMultiplier;
				}
				this.health -= aDamage;
				if(energyBar==null&&!GameManager.REF.demo) {
					GameObject eb = this.gameObject;
					eb = healthBarPool.FastInstantiate(GameObject.Find ("Canvas").transform);
					energyBar = eb.GetComponent<EnergyBar>();
					//	energyBar.transform.SetParent(canvas.transform);
					EnergyBarFollowObject guiBar = energyBar.GetComponent<EnergyBarFollowObject>();
					
					if(this.gameObject.transform.FindChild("BarPoint")==null) {
						Debug.Log (this.name+" has no BarPoint");
					} else
						guiBar.followObject = this.gameObject.transform.FindChild("BarPoint").gameObject;
					
					energyBar.SetValueMax(Convert.ToInt32(health+aDamage));
					
				}
				if(energyBar!=null)
					this.energyBar.SetValueCurrent((int) this.health);
			}

			if(this.health>=0f) {
				// If we still have health, do we want to slow this unit?
				if(aSlowTime>0) {
					Debug.Log(unitType+" - "+aSlowTarget);
					ETargetType thisT = (this.unitType&aSlowTarget);
					Debug.Log (thisT);
					if(thisT==this.unitType) {
						slowTimeRemaining += aSlowTime;
						this.unitSpeed = this.originalSpeed * aSlowPercent;

						updateSpeeds();
					}
				}
			}
		}
		public void updateSpeeds() {
			if(this.GetComponent<HumanoidSpeedComponent>()!=null) {
				this.GetComponent<HumanoidSpeedComponent>().runSpeed = this.unitSpeed;
				this.GetComponent<HumanoidSpeedComponent>().walkSpeed = this.unitSpeed;
				this.GetComponent<HumanoidSpeedComponent>().Walk();
			}
			if(this.GetComponent<FlightPathFollower>()!=null) {
				this.GetComponent<FlightPathFollower>().moveSpeed = this.unitSpeed;
			}
		}
		public void FixedUpdate() {
			if(this.slowTimeRemaining>0) {
				this.slowTimeRemaining --;
				if(this.slowTimeRemaining==0) {
					this.unitSpeed = this.originalSpeed;
					this.updateSpeeds();

				}
			}
		}
		public void OnDestroy() {

			if(energyBar!=null) {
				this.energyBar.GetComponent<EnergyBarFollowObject>().followObject = null;
				this.energyBar.gameObject.SetActive(false);
				energyBar = null;
			}
		}

		private IEnumerator startDestroying() {
			if(this.deathParticles.Length>0) {
				for(int i = 0;i<deathParticles.Length;i++) {
					deathParticles[i].gameObject.SetActive(true);
				}
			}
		
			Destroy(mText.GetComponent<UIFollowTarget>());
			this.tag = "Dead";
			if(this.flying) {
				this.GetComponent<FlightPathFollower>().dieTarget();
				yield return new WaitForSeconds(3f);
			} else {
				this.unitSpeed = 0f;	
				
				SkinnedMeshRenderer[] rs = this.GetComponentsInChildren<SkinnedMeshRenderer>();
				ThirdPersonCharacter[] tp = this.GetComponents<ThirdPersonCharacter>();
				for(int i = 0;i<tp.Length;i++) {
					Destroy(tp[i]);
				}
				Collider[] cs = this.GetComponents<Collider>();
				for(int i = 0;i<cs.Length;i++) {
					Destroy(cs[i]);
				}
				for(int i = 0;i<rs.Length;i++) {
					Destroy(rs[i]);
				}
				finalDestroy();

			}
			
			Destroy(this.gameObject);
		}

		public void Update() {
			if(exit!=null) {
				if(this.energyBar!=null)
					this.energyBar.SetValueCurrent((int) this.health);
				if ( health <= 0 && !destroying ) {
				
					if(mText) {	
						mText.Add((int) this.value,Color.green,1f);
						GameManager.REF.usersCash += (int) this.value;
					}
					StartCoroutine(startDestroying());
					destroying = true;
				}
				if(Vector3.Distance(exit.position,this.transform.position)<exitThreshold) {
					Destroy(this.gameObject);
					GameManager.REF.creepEscape();
				} 
			}
		}
		
	}
}

